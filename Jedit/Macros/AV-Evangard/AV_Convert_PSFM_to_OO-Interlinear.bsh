// Vangard 2002 - Alpha 7.0
// This script should convert most clean p.SFM files into a usable OO text file.
// Note that CLEAN means incoming files are:
// 1. UTF-8 with unix line endings. Other encodings are not verified, but might have success. The script depends heavily on the \n symbol, though, so it is likely that text to be converted needs to change to unix line endings at a minimum. 
// 2. Every row of text begins with a PARAGRAPH or verse marker. (that is, no return characters that are not followed with a paragraph tag, except possibly the end of file.)
// Note that p.SFM is a subset/superset of USFM 2.4, with compatibility to some USFM 3.0 enhancements, but not all. Word tagging are not supported, and embedded tagging is not supported. 
// ==== Known Issues ====
// - | This version supports USFM 2.4 except 
// - | embedded tags. embedded tags will be tagged but the tags that span them are not supported
// - | no table support. Each cell becomes a character style. 
// - | not supporting early \cl in Evangard.
// - | no special support for official periph suffixes.
// - | This versions supports USFM 3.0 except 
// - | no support for character style affixes (\w | ) 
// - | figures remain supported as in 2.4 
// ============================================
// ===                   PRESOAK CYCLE                            ===
// ============================================
// ============ Character Substitutions ========================
// -- add return at 'id' tag if needed (so combined files start on new lines)
// -- just in case  'cat *.sfm' > bigfile.sfm was used on a dirty file (no ending linebreak). would be required where a single output file is expected rather than per book, like run-in bible books. 
SearchAndReplace.setSearchString("(\\.)\\\\id");
SearchAndReplace.setReplaceString("$1\\n\\\\id");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setWholeWord(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);
//=
//-- add space to paragraph tags isolated on their own line
SearchAndReplace.setSearchString("(^\\\\[^\\s]+$)");
SearchAndReplace.setReplaceString("$1 ");
SearchAndReplace.replaceAll(view);
// ==================================
// ===    USFM to IDTag Conversion  ===
// ==================================
// ==== SPECIAL Conversions ================
// -- define end of intro before rearranging Chapter (1 col -> 2 col) 
SearchAndReplace.setSearchString("(^\\\\c 1 *$|^\\\\ie *$|^\\\\imte9 *$|\\\\col *$)");
SearchAndReplace.setReplaceString("</text:section>\n<text:section text:style-name=\"Body\" text:name=\"Body\">\n$1");
SearchAndReplace.replaceAll(view);
// -- define col spans before rearranging Chapter (2 col -> 1 col)
SearchAndReplace.setSearchString("(^\\\\span[^\n]*$|^\\\\mte9[^\n]*$)");
SearchAndReplace.setReplaceString("</text:section>\n<text:section text:style-name=\"Span\" text:name=\"Span\">\n$1");
SearchAndReplace.replaceAll(view);
// ===============Inline=Figures ===============================
// absolute size (number x number ) 
SearchAndReplace.setSearchString("\\\\fig ([^(]*?)\\((\\d+[^ ]+) x (\\d+[^)]+)\\)\\|([^|]*)\\|inline\\|[^\\\\]*\\\\fig\\*");
SearchAndReplace.setReplaceString("<draw:frame draw:style-name=\"fig\" draw:name=\"$1\" text:anchor-type=\"as-char\" svg:width=\"$2\" svg:height=\"$3\" draw:z-index=\"2\"><draw:image xlink:href=\"$4\" xlink:type=\"simple\" xlink:show=\"embed\" xlink:actuate=\"onLoad\" loext:mime-type=\"image/png\"></draw:image></draw:frame>");
SearchAndReplace.replaceAll(view);
// === Chapter markers rearranged to their published order. ========
// -- \cp replaces \c
SearchAndReplace.setSearchString("(^\\\\c )(.+$){1,10}\\n\\\\(cp) (.+$){1,10}");
SearchAndReplace.setReplaceString("$1$4<text:variable-set text:name=\"$3\" text:display=\"none\" office:value-type=\"string\">$2</text:variable-set>");
SearchAndReplace.replaceAll(view);
// -- not supporting early \cl in Evangard. Manual convert to late \cl is prerequisite
// -- late \cl moves before \c (character style)
SearchAndReplace.setSearchString("(^\\\\c )(.+$){1,10}\\n\\\\(cl) (.+$){1,30}");
SearchAndReplace.setReplaceString("\\\\$3 $4<text:variable-set text:name=\"cn\" text:display=\"none\" office:value-type=\"string\">$2</text:variable-set><text:variable-set text:name=\"cl\" text:display=\"none\" office:value-type=\"string\">$4</text:variable-set>");
SearchAndReplace.replaceAll(view);
//-- cn variable for all \c chapters
SearchAndReplace.setSearchString("(^\\\\c\\s+)([^\\n]+)?( |<|$)");
SearchAndReplace.setReplaceString("$1$2<text:variable-set text:name=\"cn\" text:display=\"none\" office:value-type=\"string\">$2</text:variable-set>");
SearchAndReplace.replaceAll(view);
// -Move ms#|s#|r|d|sr in front of dropcap chaps and labelled chapters.  (repeats 5 times)
SearchAndReplace.setSearchString("(^\\\\c .+$\\n|^\\\\cl .+$\\n)(\\\\ms)(\\d{0,1} .+$\\n)");
SearchAndReplace.setReplaceString("$2$3$1");
SearchAndReplace.replaceAll(view);
SearchAndReplace.setSearchString("(^\\\\c .+$\\n|^\\\\cl .+$\\n)(\\\\ms)(\\d{0,1} .+$\\n)");
SearchAndReplace.setReplaceString("$2$3$1");
SearchAndReplace.replaceAll(view);
SearchAndReplace.setSearchString("(^\\\\c .+$\\n|^\\\\cl .+$\\n)(\\\\ms)(\\d{0,1} .+$\\n)");
SearchAndReplace.setReplaceString("$2$3$1");
SearchAndReplace.replaceAll(view);
SearchAndReplace.setSearchString("(^\\\\c .+$\\n)(\\\\s|\\\\r|\\\\cd|\\\\d|\\\\sr)(\\d{0,1} .+$\\n)");
SearchAndReplace.setReplaceString("$2$3$1");
SearchAndReplace.replaceAll(view);
SearchAndReplace.setSearchString("(^\\\\c .+$\\n)(\\\\s|\\\\r|\\\\cd|\\\\d|\\\\sr)(\\d{0,1} .+$\\n)");
SearchAndReplace.setReplaceString("$2$3$1");
SearchAndReplace.replaceAll(view);
SearchAndReplace.setSearchString("(^\\\\c .+$\\n)(\\\\s|\\\\r|\\\\cd|\\\\d|\\\\sr)(\\d{0,1} .+$\\n)");
SearchAndReplace.setReplaceString("$2$3$1");
SearchAndReplace.replaceAll(view);
SearchAndReplace.setSearchString("(^\\\\c .+$\\n)(\\\\s|\\\\r|\\\\cd|\\\\d|\\\\sr)(\\d{0,1} .+$\\n)");
SearchAndReplace.setReplaceString("$2$3$1");
SearchAndReplace.replaceAll(view);
//- make first paragraph part of paragraph c
SearchAndReplace.setSearchString("(^\\\\c .+$)\\n\\\\[^ ]+?( |$)");
SearchAndReplace.setReplaceString("$1");
SearchAndReplace.replaceAll(view);
textArea.goToBufferStart(false);
//- (delete verse 1 after dropcap Chapter numbers.) 
SearchAndReplace.setSearchString("(^\\\\c\\s\\d{1,3})([^\n]+)\\\\v\\s1(\\s|\\-)[\\d\\-]{0,5} ");
SearchAndReplace.setReplaceString("$1\u200b$2");
SearchAndReplace.replaceAll(view);
textArea.goToBufferStart(false);
//- cn variable
//SearchAndReplace.setSearchString("^(\\\\c\s+)([0-9]+)(\s+)");
//SearchAndReplace.setReplaceString("$1\\\\cn $2\u200b\\\\cn\\*");
//SearchAndReplace.replaceAll(view);
// === Verse markers rearranged to their published order. ==========
// -- returns before \v
SearchAndReplace.setSearchString("\\n(\\\\v)");
SearchAndReplace.setReplaceString(" $1");
SearchAndReplace.replaceAll(view);
// -- \vp replaces \v
SearchAndReplace.setSearchString("(\\\\v )([^ ]+) (\\\\vp )([^\\\\]+)");
SearchAndReplace.setReplaceString("$1$4 $3$2");
SearchAndReplace.replaceAll(view);
// -- space after \fv and \v
// SearchAndReplace.setSearchString("(\\\\fv|\\\\v) ");
// SearchAndReplace.setReplaceString(" $1 ");
// SearchAndReplace.setBeanShellReplace(false);
// SearchAndReplace.replaceAll(view);
// ==== verse numbers in poetry shift out of the margin =================
// -- prepend 3 figure spaces to \v after \q 
//SearchAndReplace.setSearchString("^(\\\\q[^ ]* \\\\v )([0-9\\-][0-9\\-][0-9\\-]+) ");
//SearchAndReplace.setReplaceString("$1    $2 ");
//SearchAndReplace.replaceAll(view);
// -- prepend 2 figure spaces to \v after \q 
//SearchAndReplace.setSearchString("^(\\\\q[^ ]* \\\\v )([0-9\\-][0-9\\-]) ");
//SearchAndReplace.setReplaceString("$1   $2 ");
//SearchAndReplace.replaceAll(view);
// -- prepend 1 figure spaces to \v after \q 
//SearchAndReplace.setSearchString("^(\\\\q[^ ]* \\\\v )([0-9\\-]) ");
//SearchAndReplace.setReplaceString("$1  $2 ");
//SearchAndReplace.replaceAll(view);
// ================ Verse Markers ==========================
SearchAndReplace.setSearchString("\\\\v\\s{1,5}([^ ]{1,})(\\s)");
SearchAndReplace.setReplaceString("<text:variable-set text:name=\"vn\" text:display=\"none\" office:value-type=\"string\">$1</text:variable-set><text:span text:style-name=\"v\" >$1</text:span><text:span text:style-name=\"_\">\u00a0</text:span>");
SearchAndReplace.replaceAll(view);
SearchAndReplace.setSearchString("\\\\vp\\s{1,5}([^*]{1,8})\\\\vp\\*\\s{0,4}");
SearchAndReplace.setReplaceString("<text:variable-set text:name=\"vp\" text:display=\"none\" office:value-type=\"string\">$1</text:variable-set>");
SearchAndReplace.replaceAll(view);
// -- Remove visible verse 1 in drop cap paragraphs. 
SearchAndReplace.setSearchString("\\\\c (\\d{1,3})<text:variable-set text:name=\"cn\" text:display=\"none\" office:value-type=\"string\">(\\d{1,3})</text:variable-set> <text:variable-set text:name=\"vn\" text:display=\"none\" office:value-type=\"string\">([^<]{1,6})</text:variable-set><text:span text:style-name=\"v\" >[^<]{1,6}</text:span><text:span text:style-name=\"_\"> </text:span>");
SearchAndReplace.setReplaceString("\\\\c $1<text:variable-set text:name=\"cn\" text:display=\"none\" office:value-type=\"string\">$2</text:variable-set><text:variable-set text:name=\"vn\" text:display=\"none\" office:value-type=\"string\">$3</text:variable-set>");
SearchAndReplace.replaceAll(view);
// ==== No break spaces =====================================
// -- double slashes become spaces 
// -- after other spaces become no break in those paragraphs
SearchAndReplace.setSearchString("(^\\+)//(.+[^/]$)");
SearchAndReplace.setReplaceString("$1//$2//");
SearchAndReplace.replaceAll(view);
SearchAndReplace.setSearchString(" (?=[^\\n]+//)");
SearchAndReplace.setReplaceString("~");
SearchAndReplace.replaceAll(view);
SearchAndReplace.setSearchString("//(?=[^\\n]+//)");
SearchAndReplace.setReplaceString(" ");
SearchAndReplace.replaceAll(view);
SearchAndReplace.setSearchString("(\\\\[^\\n]+?)~");
SearchAndReplace.setReplaceString("$1 ");
SearchAndReplace.replaceAll(view);
SearchAndReplace.setSearchString("//");
SearchAndReplace.setReplaceString("");
SearchAndReplace.replaceAll(view);
// ================ Tables ================================
//-- Table header
SearchAndReplace.setSearchString("^\\\\rem Table \\|([^|]*)\\|cols=\"([^\"]+)\"\\|([^\\n]*)$");
SearchAndReplace.setReplaceString("<table:table table:$1 $3> <table:table-column table:number-columns-repeated=\"$2\"/>");
SearchAndReplace.replaceAll(view);
//-- Table footer
SearchAndReplace.setSearchString("(^\\\\tr\\d* [^\\n]+)(\\n\\\\i*b)");
SearchAndReplace.setReplaceString("$1\\n</table:table>$2");
SearchAndReplace.replaceAll(view);
//-- Table rows
SearchAndReplace.setSearchString("^\\\\tr\\d* ([^\\n]+)$");
SearchAndReplace.setReplaceString("<table:table-row>$1</table:table-row>");
SearchAndReplace.replaceAll(view);
//-- Table cells
SearchAndReplace.setSearchString("\\\\(tc\\d|tcc\\d|tcr\\d|th\\d|thc\\d|thr\\d)([^\\n<\\\\]*)");
SearchAndReplace.setReplaceString("<table:table-cell office:value-type=\"string\"><text:p text:style-name=\"$1\">$2</text:p></table:table-cell>\n");
SearchAndReplace.replaceAll(view);
// ================ Variables Text ==========================
// -- 1st id line
SearchAndReplace.setSearchString("(\\A\\\\id )(.+$)");
SearchAndReplace.setReplaceString("$1<text:variable-set text:name=\"cn\" text:display=\"none\" office:value-type=\"string\">~</text:variable-set>\n\\\\rem <text:variable-set text:name=\"id\" text:display=\"none\" office:value-type=\"string\">$2</text:variable-set>");
SearchAndReplace.replaceAll(view);
// -- id line
SearchAndReplace.setSearchString("(\n\\\\id )(.+$)");
SearchAndReplace.setReplaceString("<text:variable-set text:name=\"cn\" text:display=\"none\" office:value-type=\"string\">~</text:variable-set>\n$1<text:variable-set text:name=\"id\" text:display=\"none\" office:value-type=\"string\">$2</text:variable-set>");
SearchAndReplace.replaceAll(view);
// -- periph line
SearchAndReplace.setSearchString("(^\\\\periph )(.+$)");
SearchAndReplace.setReplaceString("$1<text:variable-set text:name=\"periph\" text:display=\"none\" office:value-type=\"string\">$2</text:variable-set>");
SearchAndReplace.replaceAll(view);
// -- rem (hidden paragraph) type variables (h+, ide, rem, sts,usfm)
SearchAndReplace.setSearchString("\n\\\\(h|h\\d|ide|rem|sts|usfm) (.+$)?");
SearchAndReplace.setReplaceString("<text:variable-set text:name=\"$1\" text:display=\"none\" office:value-type=\"string\">$2</text:variable-set>");
SearchAndReplace.replaceAll(view);
// -- Table of Contents entries (toc+, toca+)
// (currently stylesheet manages to .2pt paragraph.)
// -- meta (paragraph visible) type variables (id, periph, c)
//
// -- meta (character style visible text) variables (cp, v, vp, [{)
//
// -- meta (character attribute -- pipe) variables (cat, fig, w) 
// ==declared variables not supported
//SearchAndReplace.setSearchString("\\[\\{(.+?)\\}\\]");
//SearchAndReplace.setReplaceString("<TextVarName:$1>");
// SearchAndReplace.replaceAll(view);
// ================ Figures ===============================
// absolute size (number x number ) 
SearchAndReplace.setSearchString("^\\\\(\\S+) \\\\fig ([^(]*?)\\((\\d+[^ ]+) x (\\d+[^)]+)\\)\\|([^|]*)\\|col\\|[^\\\\]*\\\\fig\\*");
SearchAndReplace.setReplaceString("<text:p text:style-name=\"$1\"><draw:frame draw:style-name=\"fig\" draw:name=\"$2\" text:anchor-type=\"paragraph\" svg:width=\"$3\" svg:height=\"$4\" draw:z-index=\"0\"><draw:image xlink:href=\"$5\" xlink:type=\"simple\" xlink:show=\"embed\" xlink:actuate=\"onLoad\" loext:mime-type=\"image/png\"></draw:image></draw:frame></text:p>");
SearchAndReplace.replaceAll(view);
// relative size (number pct x scale) 
SearchAndReplace.setSearchString("^\\\\(\\S+) \\\\fig ([^(]*?)\\((\\d+[^ ]+) x ([^)]+)\\)\\|([^|]*)\\|col\\|[^\\\\]*\\\\fig\\*");
SearchAndReplace.setReplaceString("<text:p text:style-name=\"$1\"><draw:frame draw:style-name=\"fig\" draw:name=\"$2\" text:anchor-type=\"paragraph\" svg:width=\"$3\" style:rel-height=\"$4\" draw:z-index=\"0\"><draw:image xlink:href=\"$5\" xlink:type=\"simple\" xlink:show=\"embed\" xlink:actuate=\"onLoad\" loext:mime-type=\"image/png\"></draw:image></draw:frame></text:p>");
SearchAndReplace.replaceAll(view);
// ================= Paragraph Styles =======================
SearchAndReplace.setSearchString("^\\\\([^\\s]+)($| (.*$|$))");
SearchAndReplace.setReplaceString("<text:p text:style-name=\"$1\">$3</text:p>");
SearchAndReplace.replaceAll(view);
// ================= Footnotes =============================
SearchAndReplace.setSearchString("\\\\(ef|erq|ex|f|fdc|fe|fp|fs|x|xdc|xnt|xot)\\s(.)\\s(.+?)\\\\\\1\\*");
SearchAndReplace.setReplaceString("<text:note  text:note-class=\"footnote\"><text:note-citation>1</text:note-citation>  <text:note-body><text:p text:style-name=\"$1\"><text:span  style-name=\"$1\">$3</text:span></text:p></text:note-body></text:note>");
SearchAndReplace.replaceAll(view);
SearchAndReplace.setSearchString("\\\\([fx]\\S+)\\s");
SearchAndReplace.setReplaceString("</text:span><text:span text:style-name=\"$1\">");
SearchAndReplace.replaceAll(view);
// ================ Strongs numbers to Glosses ==================
//== remove quotes... jedit lunacy
SearchAndReplace.setSearchString("\\\\w ([^*]+)\\|strong=([^*]+)\\\\w\\*");
SearchAndReplace.setReplaceString("<text:ruby text:style-name=\"ft\"><text:ruby-base>$1</text:ruby-base><text:ruby-text>$2</text:ruby-text></text:ruby>");
SearchAndReplace.replaceAll(view);
// ================ Character Styles ========================
SearchAndReplace.setSearchString("\\\\[^\\s]+\\*");
SearchAndReplace.setReplaceString("</text:span>");
SearchAndReplace.replaceAll(view);
//=
SearchAndReplace.setSearchString("\\\\([^\\s]+) ");
SearchAndReplace.setReplaceString("<text:span text:style-name=\"$1\">");
SearchAndReplace.replaceAll(view);
//================USFM Entity Characters====================
// -- Tilde become nobreak spaces
SearchAndReplace.setSearchString("~");
SearchAndReplace.setReplaceString("\u00a0");
SearchAndReplace.replaceAll(view);
// ======================================================
//  ===                           Rinse Cycle                                                                                  ===
// ======================================================
// -- clean up blank lines
SearchAndReplace.setSearchString("\\n\\n+");
SearchAndReplace.setReplaceString(" \\n");
SearchAndReplace.replaceAll(view);
//-- clean up leading/trailing space
SearchAndReplace.setSearchString("(^ +| +$)");
SearchAndReplace.setReplaceString("");
SearchAndReplace.replaceAll(view);
// -- excess introduced spaces
SearchAndReplace.setSearchString(">  +");
SearchAndReplace.setReplaceString("> ");
SearchAndReplace.replaceAll(view);
// ======================================================
//  ===                       Manually Insert LO Stylesheet
// ======================================================
textArea.goToBufferStart(false);
insertFile(View view){

	VFSFileChooserDialog chooser = new VFSFileChooserDialog(
			view,null,VFSBrowser.OPEN_DIALOG,false);
	String[] files = chooser.getSelectedFiles();
	if(files == null)
		return;
	String path = files[0];

	// read into temporary buffer
	Buffer b = jEdit.openTemporary(view,null,path,false);
	if(b == null) return;
	while(!b.isLoaded()) VFSManager.waitForRequests();
	String text = b.getText(0,b.getLength());
	view.getTextArea().setSelectedText(text);

}

if(buffer.isReadOnly()){
	getToolkit().beep();
}
else{
	insertFile(view);
}
// --- out of the edit .fodt business
textArea.goToBufferStart(false);
SearchAndReplace.setSearchString("</text:section>\\n*</office:text></office:body></office:document>\\s*");
SearchAndReplace.setReplaceString("");
SearchAndReplace.replaceAll(view);
//===
// close xml
//===
textArea.goToBufferEnd(false);
textArea.setSelectedText("</text:section>");
textArea.insertEnterAndIndent();
textArea.setSelectedText("</office:text></office:body></office:document>");
textArea.insertEnterAndIndent();
